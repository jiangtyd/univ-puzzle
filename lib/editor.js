// Generated by CoffeeScript 1.7.1
(function() {
  var BoardModel, BoardView, BoardViewSettings, Cell, Color, EdgeCell, FaceCell, VertexCell, addCollapsibleMenu, attachBoardToWrapper, init, initColorMenu, initMenu, initboard, newRect, toggleMenu,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Cell = (function() {
    function Cell() {}

    return Cell;

  })();

  VertexCell = (function(_super) {
    __extends(VertexCell, _super);

    function VertexCell(given, fill, thickness) {
      this.given = given != null ? given : true;
      this.fill = fill != null ? fill : 0;
      this.thickness = thickness != null ? thickness : 1;
    }

    VertexCell.cellType = function() {
      return "vertex";
    };

    return VertexCell;

  })(Cell);

  EdgeCell = (function(_super) {
    __extends(EdgeCell, _super);

    function EdgeCell(given, fill, thickness) {
      this.given = given != null ? given : false;
      this.fill = fill != null ? fill : 0;
      this.thickness = thickness != null ? thickness : 1;
    }

    EdgeCell.cellType = function() {
      return "edge";
    };

    return EdgeCell;

  })(Cell);

  FaceCell = (function(_super) {
    __extends(FaceCell, _super);

    function FaceCell(givenNum, givenFill, num, fill) {
      this.givenNum = givenNum != null ? givenNum : false;
      this.givenFill = givenFill != null ? givenFill : false;
      this.num = num != null ? num : null;
      this.fill = fill != null ? fill : 0;
    }

    FaceCell.cellType = function() {
      return "face";
    };

    return FaceCell;

  })(Cell);

  BoardModel = (function() {
    function BoardModel(width, height) {
      var row, x, y, _i, _j, _ref, _ref1;
      this.width = width;
      this.height = height;
      this.cells = [];
      for (y = _i = 0, _ref = 2 * this.height; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        row = [];
        for (x = _j = 0, _ref1 = 2 * this.width; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          if (x % 2 === 0 && y % 2 === 0) {
            row.push(new VertexCell);
          } else if (x % 2 === 1 && y % 2 === 1) {
            row.push(new FaceCell);
          } else {
            row.push(new EdgeCell);
          }
        }
        this.cells.push(row);
      }
    }

    return BoardModel;

  })();

  BoardViewSettings = (function() {
    function BoardViewSettings(cellHeight, cellWidth, borderWidth) {
      this.cellHeight = cellHeight != null ? cellHeight : 40;
      this.cellWidth = cellWidth != null ? cellWidth : 40;
      this.borderWidth = borderWidth != null ? borderWidth : 3;
      this.vertexColorScheme = {
        0: Color.BLACK
      };
      this.edgeColorScheme = {
        0: Color.BLACK
      };
      this.faceColorScheme = -{
        1: Color.LIGHT_GREY,
        0: Color.RED,
        1: Color.BLACK
      };
    }

    return BoardViewSettings;

  })();

  Color = (function() {
    function Color(red, green, blue) {
      this.red = red;
      this.green = green;
      this.blue = blue;
    }

    Color.prototype.toRGBA = function() {
      return "rgba(" + this.red + ", " + this.green + ", " + this.blue + ", 1)";
    };

    Color.prototype.mix = function(color2) {
      return new Color((this.red + color2.red) / 2, (this.green + color2.green) / 2, (this.blue + color2.blue) / 2);
    };

    Color.WHITE = new Color(255, 255, 255);

    Color.LIGHT_GREY = new Color(191, 191, 191);

    Color.GREY = new Color(127, 127, 127);

    Color.DARK_GREY = new Color(63, 63, 63);

    Color.BLACK = new Color(0, 0, 0);

    Color.RED = new Color(255, 0, 0);

    Color.GREEN = new Color(0, 255, 0);

    Color.BLUE = new Color(0, 0, 255);

    return Color;

  })();

  newRect = function(topleftx, toplefty, height, width) {
    console.log("x, y: " + topleftx + ', ' + toplefty);
    return $(document.createElementNS("http://www.w3.org/2000/svg", "rect")).attr({
      x: parseInt(topleftx),
      y: parseInt(toplefty),
      height: parseInt(height),
      width: parseInt(width)
    });
  };

  attachBoardToWrapper = function(boardWrapperId, boardView) {
    var $boardWrapper;
    $boardWrapper = $("#" + boardWrapperId).attr({
      onselectstart: "return false;"
    });
    $boardWrapper.css({
      width: boardView.boardWidth,
      height: boardView.boardHeight
    });
    return $boardWrapper.append(boardView.getElement());
  };

  BoardView = (function() {
    function BoardView(boardModel, settings) {
      var cell, cellsViewRow, x, y, _i, _j, _ref, _ref1;
      this.boardModel = boardModel;
      this.settings = settings;
      this.painting = false;
      this.boardWidth = this.boardModel.width * this.settings.cellWidth + (this.boardModel.width + 1) * this.settings.borderWidth;
      this.boardHeight = this.boardModel.height * this.settings.cellHeight + (this.boardModel.width + 1) * this.settings.borderWidth;
      this.$boardElement = $("<svg/>").attr({
        width: this.boardWidth,
        height: this.boardHeight,
        xmlns: "http://www.w3.org/2000/svg",
        version: "1.1",
        id: "gameBoard"
      });
      this.cellsView = [];
      for (y = _i = 0, _ref = 2 * this.boardModel.height; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        cellsViewRow = [];
        for (x = _j = 0, _ref1 = 2 * this.boardModel.width; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          cell = this.newCell(x, y, this.boardModel.cells[x][y]);
          this.$boardElement.append(cell);
          cellsViewRow.push(cell);
        }
        this.cellsView.push(cellsViewRow);
      }
    }

    BoardView.prototype.getElement = function() {
      return this.$boardElement;
    };

    BoardView.prototype.newCell = function(cellX, cellY, cellModel) {
      var cell, cellFillColor, cellId;
      if (cellX % 2 === 0) {
        if (cellY % 2 === 0) {
          cell = this.newVertex(this.vertexCellXToX(cellX), this.vertexCellYToY(cellY), cellModel);
          cellFillColor = this.settings.vertexColorScheme[cellModel.fill];
          cellId = "v" + cellX + "_" + cellY;
        } else {
          cell = this.newEdge(this.vertexCellXToX(cellX), this.vertexCellYToY(cellY), cellModel, true);
          cellFillColor = this.settings.vertexColorScheme[cellModel.fill];
          cellId = "e" + cellX + "_" + cellY;
        }
      } else {
        if (cellY % 2 === 0) {
          cell = this.newEdge(this.vertexCellXToX(cellX), this.vertexCellYToY(cellY), cellModel, false);
          cellFillColor = this.settings.vertexColorScheme[cellModel.fill];
          cellId = "e" + cellX + "_" + cellY;
        } else {
          cell = this.newFace(this.vertexCellXToX(cellX), this.vertexCellYToY(cellY), cellModel);
          cellFillColor = this.settings.vertexColorScheme[cellModel.fill];
          cellId = "f" + cellX + "_" + cellY;
        }
      }
      $(cell).attr({
        id: cellId,
        fill: cellFillColor.toRGBA()
      });
      return cell;
    };

    BoardView.prototype.vertexCellXToX = function(cellX) {
      return this.settings.borderWidth * (cellX / 2 + 1) + this.settings.cellWidth * cellX / 2;
    };

    BoardView.prototype.vertexCellYToY = function(cellY) {
      return this.settings.borderWidth * (cellY / 2 + 1) + this.settings.cellHeight * cellY / 2;
    };

    BoardView.prototype.newVertex = function(x, y, vertexCellModel) {
      var t;
      t = vertexCellModel.thickness + this.settings.borderWidth;
      console.log('t vertex = ' + t);
      return newRect(x, y, t, t);
    };

    BoardView.prototype.newEdge = function(x, y, edgeCellModel, isHorizontal) {
      var t;
      t = edgeCellModel.thickness + this.settings.borderWidth;
      if (isHorizontal) {
        return newRect(x, y, this.settings.cellWidth, t);
      } else {
        return newRect(x, y, t, this.settings.cellHeight);
      }
    };

    BoardView.prototype.newFace = function(x, y, edgeCellModel) {
      return newRect(x, y, this.settings.cellWidth, this.settings.cellHeight);
    };

    BoardView.prototype.numColors = function() {
      return 1;
    };

    return BoardView;

  })();

  'function Board (gb_input) {\n  var gb = gb_input;\n  var cells = [], colorTable = new HashTable({});\n  var vEdges = [], hEdges = [];\n  var vertices = [];\n  var CELL_HEIGHT = 40, CELL_WIDTH = 40;\n  var width = 0, height = 0;\n\n  var colorInputs = [];\n  var colors = [];\n    \n  var painting = false, alreadyPainting = false;\n  var dragTargetColor, dragTargetColorIndex;\n\n  var deleteBoard = function() {\n    (gb).empty();\n  };\n\n\n  var startPainting = function(evt) {\n    painting = true;\n    var target = evt.target;\n    var fillColor = $(target).attr("fill");\n    var coords = $(target).attr("id").substring(1).split(\'_\');\n\n    for(var i = 0; i < colors.length; i++) {\n      if(fillColor === colors[i]) {\n        var next = (i+1)%(colors.length);\n        dragTargetColor = colors[next];\n        dragTargetColorIndex = next;\n\n        $(target).attr("fill", dragTargetColor);\n        cells[parseInt(coords[0])][parseInt(coords[1])] = dragTargetColorIndex;\n      }\n    }\n  }\n\n  var stopPainting = function(evt) {\n    painting = false;\n  }\n\n  var toggleCell = function(evt) {\n    if(!painting) return null;\n\n    var target = evt.target;\n    var coords = target.getAttribute("id").substring(1).split(\'_\');\n\n    $(target).attr("fill", dragTargetColor);\n    cells[parseInt(coords[0])][parseInt(coords[1])] = dragTargetColorIndex;\n  }\n  \n  var getCell = function(i,j) {\n    return cells[i][j];\n  };\n\n  var getCells = function() {\n    return cells;\n  };\n\n  var getCellsOfColor = function(i) {\n    return colorTable.getItem(i);\n  };\n\n  var getPainting = function() {\n    return painting;\n  }\n\n  return {\n    numColors: function() {\n      return colors.length;\n    },\n    addColorInput: function(input) {\n      colorInputs.push(input);\n      colors.push(\'\#\' + input.toString());\n    },\n    changeColor: function(i) {\n      newColor = \'\#\' + colorInputs[i].toString();\n      $("[fill=\'" + colors[i] + "\']").attr("fill", newColor);\n      colors[i] = newColor\n    },\n    createBoard: function(width, height) { \n      width = width;\n      height = height;\n\n      $("#boardDiv").css({\n        "width" : width*(1+CELL_WIDTH) + 2,\n        "height" : height *(1+CELL_HEIGHT) + 2\n      });\n\n      $("#gameBoard").mouseleave(function() {\n        stopPainting();\n      });\n\n      // width, height measured in # cells\n      for(var i=0; i<width; i++) {\n        cells.push([]);\n        for(var j=0; j<height; j++) {\n          var cell = newRect();\n          if((i+j)%2 === 0) { \n            cells[i].push(0);\n            colorTable.appendToItem(0, i+\'_\'+j); // cell ids are separated by \'_\'\n            $(cell).attr("fill", colors[0]);\n          } else {\n            cells[i].push(1);\n            colorTable.appendToItem(1, i+\'_\'+j);\n            $(cell).attr("fill", colors[1]);\n          }\n\n          $(cell).attr({\n            "width": CELL_WIDTH,\n            "height": CELL_HEIGHT,\n            "x": i*(1+CELL_WIDTH)+1,\n            "y": j*(1+CELL_HEIGHT)+1,\n            "id": "c"+i+"_"+j\n          });\n          $(cell).mousedown(startPainting);\n          $(cell).mouseover(toggleCell);\n          $(cell).mouseup(stopPainting);\n\n          $(gb).append(cell);\n        }   \n      }\n    }\n  };\n}\n';

  toggleMenu = function(headingID, menuID) {
    var heading, menu, _base;
    if (!document.getElementById) {
      return;
    }
    heading = document.getElementById(headingID).innerHTML;
    document.getElementById(headingID).innerHTML = heading.charAt(0) === "+" ? "-" + heading.substring(1) : "+" + heading.substring(1);
    menu = document.getElementById(menuID).style;
    menu.display = typeof (_base = menu.display === 'block') === "function" ? _base({
      'none': 'block'
    }) : void 0;
    return 'addColor = (board, color) ->\n  idx = board.numColors()\n\n  cDiv = document.createElement("div")\n  $(cDiv).attr({\n    "class": "menuItem",\n    "id": "colorDiv"+idx\n  })\n\n  cDelete = document.createElement("input")\n  $(cDelete).attr({\n    "type": "button",\n    "value": "x"\n  })\n\n  cMenuItem = document.createElement("input"); # color picker\n  col = new jscolor.color(cMenuItem)\n  col.fromString(color)\n  board.addColorInput(col)\n  $(cMenuItem).attr({\n    "style": cMenuItem.getAttribute("style") + " width: 5em;",\n    "id": "color"+idx,\n    "onchange": "board.changeColor("+idx+");"\n  })\n\n  $(cDiv).append([cDelete, cMenuItem])\n  $("#colorMenu").append(cDiv)';
  };

  addCollapsibleMenu = function(menuName, menuTitle) {
    var collapsible, menu, menuTitleH3;
    menu = document.createElement("div");
    $(menu).attr({
      "class": "menuHeading",
      "onclick": "toggleMenu('" + menuName + "Title" + "', '" + menuName + "');"
    });
    menuTitleH3 = document.createElement("h3");
    $(menuTitleH3).attr("id", menuName + "Title");
    $(menuTitleH3).text("+ " + menuTitle);
    collapsible = document.createElement("div");
    $(collapsible).attr({
      "class": "menuCollapsible",
      "id": menuName
    });
    menu.appendChild(menuTitleH3);
    return $("#menu").append([menu, collapsible]);
  };

  initColorMenu = function() {
    addCollapsibleMenu("colorMenu", "Colors");
    return 'addNewColorButton = document.createElement("input")\n$(addNewColorButton).attr({\n  "type": "button",\n  "value": "Add new color",\n  "onclick": "addColor(\'000000\');"\n})\n\n$("#colorMenu").append(addNewColorButton)\naddColor("777777")\naddColor("FFFFFF")\n\npaintingDiv = document.createElement("div")\n$("#menu").append(paintingDiv)';
  };

  initMenu = function() {
    return console.log('init menu');
  };

  initboard = function(id) {
    return new Board(document.getElementById(id));
  };

  init = function() {
    var b, bm;
    bm = new BoardModel(10, 10);
    b = new BoardView(bm, new BoardViewSettings());
    attachBoardToWrapper("gameBoardWrapper", b);
    return initMenu();
  };

  $(document).ready(function() {
    init();
    return alert('hi');
  });

}).call(this);
